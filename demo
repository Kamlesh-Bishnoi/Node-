app.js

var bodyParser = require("body-parser");
var express = require("express");
var app = express();
const mongoose = require("mongoose");// excess to monogoose database
const port = 8080;

// Keep the value to true else you wont get body field in request
app.use(bodyParser.urlencoded({extended: true}));
app.use(bodyParser.json({ type: 'application/json' }));

// To define the routes
require('./routes')(app);

// FOr database Connectivity
mongoose.connect("mongodb://localhost:27017/first_data", {useNewUrlParser : true});
const db = mongoose.createConnection();

db.once("connect", function() {
  console.log("COnnected to DB");
});


app.listen(port, ()=> console.log(`Example app listening on port ${port}!`));

routes.js
module.exports = function (app) {
    app.use(function(req, res, next) {
        res.header("Access-Control-Allow-Origin", "*");
        res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
        res.header("Access-Control-Allow-Methods", "GET, PUT, POST, PATCH, DELETE");
        next();
    });

    // Import all the routes here
    app.use("/app/name", require("./get_name"));
}


getname
getname.controller.js
const NAME = require("./getName.model");

exports.getAllName = async (req, res) => {
   let retDoc = await NAME.find({isDeleted: false});
   return res.json({success: true, data: retDoc, message: "Data found"});
}

exports.getSingleName = async (req, res) => {
    if (req.params && req.params.id) {
        let retSingleDoc = await NAME.findOne({_id: req.params.id});
        return res.json({success: true, data: retSingleDoc, message: "Data found"});
    } else {    
        return res.json({success: false, data: "", message: "Parameter Missing"});
    }
}

exports.saveName = async (req, res) => {
    if (req.body && req.body.name) {
        try {
        let retDoc = new NAME({name: req.body.name});
        await retDoc.save();
        return res.json(retDoc);
        } catch(err) {

            return res.json({success: true, data: "", message: err});
        }
    }  else {
        return res.json({success: false, data: "", message: "Parameter Missing"});
    }
}

exports.deleteName = async (req, res) => {
    if (req.params && req.params.id) {
        try {
            await NAME.findOneAndUpdate({_id: req.params.id}, {"$set": {isDeleted: true}});
            return res.json({success: true, data: "", message: "Delete successfully"});
        } catch(err) {
            return res.json({success: true, data: "", message: err});
        }
    }  else {
        return res.json({success: false, data: "", message: "Parameter Missing"});
    }
}


getname.modal.js
var mongoose = require("mongoose");
var Schema = mongoose.Schema;

var nameSchema = new Schema({
    name: {type: String, unique: true},
    isDeleted: {type : Boolean, default: false},
    creationDate: {type: Date, default: new Date()},
    updationDate: {type: Date, default: new Date()},
    deletionDate: {type: Date, default: new Date()},
});

module.exports = mongoose.model('name', nameSchema);


index.js
const fetchRouter = require("router");
var router = fetchRouter();

router.get("/", require("./getName.controller").getAllName);
router.get("/:id", require("./getName.controller").getSingleName);
router.post("/", require("./getName.controller").saveName);
router.delete("/:id", require('./getName.controller').deleteName);

module.exports = router;

